data <- read.csv(file="C:\\Users\\Libing\\Documents\\Coursera\\The Data Science Specialization\\rprog-data-quiz1_data\\hw1_data.csv", head=TRUE)
data[47,]
colMeans(data, na.rm=TRUE, dims =1)
colMeans(data, na.rm=TRUE)
sum(complete.cases(data[,1]))
cOzone <- complete.cases(data[,1])
data[cozone,]
data[cozone,][,1]
mean(data[,1], na.rm = TRUE)
cozone <- data[(data[,1] > 31) & (data[,4] > 90)]
cozone <- data[data[,1] > 31]
cozone <- data[data$Ozone > 31]
cozone <- data[(data[,1] > 31 & data[,4] > 90),]
mean(cozone[,2], na.rm=TRUE)
tempsix <- data[data[,5] == 6]
tempsix <- data[data[,5] == 6,]
mean(tempsix[,"Temp"], na.rm=TRUE)
mean(tempsix[,"Temp"], na.rm=FALSE)
tempsix <- data[data[,5] == 5,]
tempsix
max(tempsix[,1])
max(tempsix[,1], na.rm=TRUE)
library(datasets)
data(iris)
?iris
s <- split(iris, iris$Species)
sapply(s, functions(x) colMeans(x[. "Sepal.Length"]) )
sapply(s, functions(x) colMeans(x[. c("Sepal.Length")]) )
sapply(s, functions(x) colMeans(x[, c("Sepal.Length")]) )
sapply(s, functions(x) colMeans(x[, "Sepal.Length"]) )
s
lapply(s, functions(x) colMeans(x[, c("Sepal.Length"]) ))
lapply(s, functions(x) colMeans(x[, 1]))
lapply(s, functions(x) colMeans(x[, c("Sepal.Length"]) ))
lapply(s, function(x) colMeans(x[, c("Sepal.Length"]) ))
lapply(s, function(x) colMeans(x[, c("Sepal.Length"]) ))
lapply(s, function(x) colMeans(x[, "Sepal.Length"]) ))
lapply(s, function(x) colMeans(x[, "Sepal.Length"]) )
lapply(s, function(x) colMeans(x[, c("Sepal.Length")] )
lapply(s, function(x) colMeans(x[, c("Sepal.Length")] ))
lapply(s, function(x) colMeans(x[, 1] ))
lapply(s, function(x) colMeans(x[, c("Sepal.Length", " Sepal.Width")] ))
lapply(s, function(x) colMeans(x[, c("Sepal.Length", "Sepal.Width")] ))
apply(iris, 2, mean)
apply(iris, 2, mean, na.rm = TRUE)
apply(iris[, 1:4], 2, mean)
debug(ls)
ls
library(datasets)
data(mtcars)
?mtcars
tapply(mtcars$mpg, mtcars$cyl, mean)
exit
stop
recover
quit
apply(mtcars, 2, mean)
lapply(mtcars, mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
tapply(mtcars$hp, mtcars$cyl, mean)
q
q
quit
?debug
exit
load("~/Coursera/The Data Science Specialization/SourceCode/.RData")
library(swirl)
swirl()
1:20
pi:10
15:1
?`:`
seq(1,20)
seq(0, 10, by=0.5)
my_seq <- seq(5,10, length=30)
length(my_seq)
1:length(my_seq)
seq(along=my_seq)
seq_along(my_seq)
rep(0,times=40)
rep(c(0,1,2, times=10))
rep(c(0,1,2), times=10)
rep(c(0,1,2), each=10)
swirl()
num_vect <- c(0.5, 55, -10, 6)
tf <- num_vecht < 1
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- c("My", "name", "is")
my_char
past(my_char, collapse = " ")
paste(my_char, collapse = " ")
my_name <- c(my_char, "Grace")
my_name
paste(my_name, collapse= " ")
paste("Hello", "World!", sep=" ")
paste("Hello", "world!", sep=" ")
paste(c(1:3), c("X", "Y", "Z"), sep="")
paste(LETTERS, 1:4, sep="-")
x <- c(44, NA, 5, NA)
x * 3
y <- rnorm(1000)
z <= rep(NA, 1000)
z <- rep(NA, 1000)
my_data <- sample(c(y,z), 100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf - Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x >0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2,10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector <- c(1:20)
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2 <- matrix(c(1:20), nrow=4, ncol=5)
identifcal(my_matrix, my_matrix2)
identical(my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp","rating", "test")
colnames(my_data) <- cnames
my_dat
my_data
5+7
x <- 5+7
x
y <- x-3
y
z <- c(1.1, 9, 3.14)
?c
z
c(z, 555, z)
z*2+100
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z/my_sqrt
my_div
c(1,2,3,4) + c(0,10)
c(1,2,3,4) + c(0,10,100)
z*2+1000
my_div
set.seed(1)
rpois(5,2)
?solve
library(KernSmooth)
library(httr)
oauth_endpoints("github")
ma <- oauth_app("github", "602d0c3ada6a2f24c5e4", "67a2753a64fc07e9a18789ca8877866b5dc600d2")
gt <- oauth2.0_token(oauth_endpoints("github"), ma)
t <- config(token = gt)
p <- GET("https://api.github.com/users/jtleek/repos", t)
j <- content(p)
j[5]
library(lattice)
?panel
?panel.lpoints
?panel.points
?panel.lines
?panel.text
?panel.lines
?panel.text
?par
?splom
?par
?trellis.par.set
?print.trellis
library(datasets)
data(airquality)
qplot(Wind, Ozone, data=airquality, facets = . ~ factor(Month))
library(qqplot2)
install.package(qqplot2)
install.package(ggplot2)
install.packages(ggplot2)
install.packages("ggplot2")
library(ggplot2)
qplot(Wind,Ozone, data=airquality, facets= . ~ factor(Month))
airquality = transform(airquality, Month = cator(Month))
airquality = transform(airquality, Month = cator(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind,Ozone, data=airquality, facets= . ~ Month)
qplot(Wind,Ozone, data=airquality, geom="smooth")
?stats_smooth
?lines
?points
?text
?lpoints
?axis
?panel.abline
?splom
?print.trellis
?trellis.par.set
setwd("C:/Users/Drubers-Liem/Drubers-Liem Documents/Libing/Coursera/The Data Science Specialization/SourceCode/RepData_PeerAssessment1")
?str
knit2html("PA_template.Rmd")
package(knitr)
libraray(knitr)
library(knitr)
knit2html("PA_template.Rmd")
knit2html("PA1_template.Rmd")
knit2html("PA1_template.Rmd")
